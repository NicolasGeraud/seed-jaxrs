<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns="http://www.springframework.org/schema/beans"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd">

  <context:component-scan base-package="fr.client.project.security"/>

  <security:http auto-config="false"
                 access-denied-page="/login/denied"
                 entry-point-ref="authenticationEntryPoint">

    <security:intercept-url pattern="/login/*" access="ROLE_ANONYMOUS"/>
    <security:intercept-url pattern="/logout" access="ROLE_USER"/>

    <security:intercept-url pattern="/css/**" access="ROLE_ANONYMOUS,ROLE_USER"/>
    <security:intercept-url pattern="/img/**" access="ROLE_ANONYMOUS,ROLE_USER"/>
    <security:intercept-url pattern="/js/**" access="ROLE_ANONYMOUS,ROLE_USER"/>

    <security:intercept-url pattern="/admin/**" access="ROLE_ADMIN"/>
    <security:intercept-url pattern="/**" access="ROLE_USER"/>

    <security:logout invalidate-session="true"
                     logout-url="/logout"
                     logout-success-url="/login/form?logout"/>

    <security:custom-filter ref="authenticationFilter" position="FORM_LOGIN_FILTER"/>

    <security:remember-me key="login"/>
  </security:http>

  <!-- A custom service where Spring will retrieve users and their corresponding access levels  -->
  <bean id="customUserDetailsService" class="fr.client.project.security.CustomUserDetailsService"/>

  <!-- Custom authentication manager. It can be anything -->
  <bean id="customAuthenticationManager" class="fr.client.project.security.CustomAuthenticationManager"/>

  <!-- Custom filter for username and password. The real customization is done in the customAthenticationManager -->
  <bean id="authenticationFilter"
        class="org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter"
        p:authenticationManager-ref="customAuthenticationManager"
        p:authenticationFailureHandler-ref="customAuthenticationFailureHandler"
        p:authenticationSuccessHandler-ref="customAuthenticationSuccessHandler"/>

  <!-- We just actually need to set the default target url here -->
  <bean id="customAuthenticationFailureHandler"
        class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler"
        p:defaultFailureUrl="/login/form?error"/>

  <!-- We just actually need to set the default target url here -->
  <bean id="customAuthenticationSuccessHandler"
        class="org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler"
        p:defaultTargetUrl="/"/>

  <!-- The AuthenticationEntryPoint is responsible for redirecting the user to a page -->
  <bean id="authenticationEntryPoint"
        class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint"
        p:loginFormUrl="/login/form"/>

  <!-- Declare an authentication-manager to use a custom userDetailsService -->
  <security:authentication-manager alias="authenticationManager">
    <security:authentication-provider user-service-ref="customUserDetailsService"/>
  </security:authentication-manager>

  <bean class="org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler"/>
</beans>
